# Project Progress & TODO Summary

## What Has Been Done

1. **Realtime Core Stable**
   - Frontend (React/Vite) and backend (Express/Socket.IO) connect reliably.
   - Room creation/join flows return acknowledgements and hydrate participants/messages.

2. **Chat + Presence**
   - Message schema normalized; all clients see messages as they arrive.
   - Participant list updates on join/leave and reflects live media-state toggles.

3. **WebRTC Calls**
   - SimplePeer signalling routed through Socket.IO.
   - Local/remote streams render with mute/camera controls.

4. **Video Sync**
   - ReactPlayer integrated with discrete `video-play/pause/seek/sync` events.
   - Host-only controls broadcast state; manual sync button re-aligns everyone.

5. **Local Uploads + YouTube**
   - Hosts can paste streaming links or upload MP4/WebM files (served via `/uploads`).

6. **Documentation Refresh**
   - Root README, backend guide, and setup docs updated for the current feature set.

## Current Issues / Pending Work

1. **Multi-User QA**
   - Run extended tests with 3+ clients (desktop/mobile/incognito) to watch for desync or stale participants.

2. **Upload Hardening**
   - Enforce MIME/extension checks, consider virus scanning, and surface upload progress/errors in UI.

3. **Video Playback Reliability**
   - Player sometimes remains on the loading spinner; reproduce and fix so streams start consistently for all users.

4. **Autoplay UX**
   - Investigate browser autoplay prompts and provide clearer cues when manual play is required.

5. **Session Persistence**
   - Rooms/users are in-memory only; evaluate Redis or database backing for production longevity.

## What To Do Next

- [ ] Conduct a full multi-client regression pass (chat, video sync, WebRTC, uploads).
- [ ] Add upload validation + size feedback and surface errors inline.
- [ ] Improve UX around autoplay (tooltips, prompt to press play).
- [ ] Wire basic auth/identity (even lightweight name prompt persistence).
- [ ] Add unit/integration tests for socket handlers and React hooks.
- [ ] Prepare production deployment notes (HTTPS, scaling, file storage strategy).

---

**If you return after a break:**
- Review this file for current status and next steps.
- Check recent git commits for code changes.
- Start by testing the app with multiple users to verify chat and participant features.
